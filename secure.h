#ifndef _SECURE_
#define _SCL_SECURE_NO_WARNINGS 
#include <boost/regex.hpp>
#include <boost/algorithm/string/replace.hpp>
#include <boost/uuid/uuid.hpp>
#include <boost/uuid/uuid_generators.hpp>
#include <boost/algorithm/string/join.hpp>
#include <boost/algorithm/string.hpp>  
#include <boost/algorithm/string/classification.hpp>
#include <boost/algorithm/string/split.hpp>
#include <iostream>
#include <iterator>
#include <algorithm>
#include <string>
extern "C" {
#include "entities.h"
}
# pragma warning(disable: 4996)

namespace antiFilter {
	static std::map<std::string, std::string> html_entities_map = {
		{ "Æ","&aelig;" },
		{ "Á","&aacute;" },
		{ "Â","&acirc;" },
		{ "À","&agrave;" },
		{ "Α","&alpha;" },
		{ "Å","&aring;" },
		{ "Ã","&atilde;" },
		{ "Ä","&auml;" },
		{ "Β","&beta;" },
		{ "Ç","&ccedil;" },
		{ "Χ","&chi;" },
		{ "‡","&dagger;" },
		{ "Δ","&delta;" },
		{ "Ð","&eth;" },
		{ "É","&eacute;" },
		{ "Ê","&ecirc;" },
		{ "È","&egrave;" },
		{ "Ε","&epsilon;" },
		{ "Η","&eta;" },
		{ "Ë","&euml;" },
		{ "Γ","&gamma;" },
		{ "Í","&iacute;" },
		{ "Î","&icirc;" },
		{ "Ì","&igrave;" },
		{ "Ι","&iota;" },
		{ "Ï","&iuml;" },
		{ "Κ","&kappa;" },
		{ "Λ","&lambda;" },
		{ "Μ","&mu;" },
		{ "Ñ","&ntilde;" },
		{ "Ν","&nu;" },
		{ "Œ","&oelig;" },
		{ "Ó","&oacute;" },
		{ "Ô","&ocirc;" },
		{ "Ò","&ograve;" },
		{ "Ω","&omega;" },
		{ "Ο","&omicron;" },
		{ "Ø","&oslash;" },
		{ "Õ","&otilde;" },
		{ "Ö","&ouml;" },
		{ "Φ","&phi;" },
		{ "Π","&pi;" },
		{ "″","&prime;" },
		{ "Ψ","&psi;" },
		{ "Ρ","&rho;" },
		{ "Š","&scaron;" },
		{ "Σ","&sigma;" },
		{ "Þ","&thorn;" },
		{ "Τ","&tau;" },
		{ "Θ","&theta;" },
		{ "Ú","&uacute;" },
		{ "Û","&ucirc;" },
		{ "Ù","&ugrave;" },
		{ "Υ","&upsilon;" },
		{ "Ü","&uuml;" },
		{ "Ξ","&xi;" },
		{ "Ý","&yacute;" },
		{ "Ÿ","&yuml;" },
		{ "Ζ","&zeta;" },
		{ "á","&aacute;" },
		{ "â","&acirc;" },
		{ "´","&acute;" },
		{ "æ","&aelig;" },
		{ "à","&agrave;" },
		{ "ℵ","&alefsym;" },
		{ "α","&alpha;" },
		{ "&","&amp;" },
		{ "∧","&and;" },
		{ "∠","&ang;" },
		{ "'","&apos;" },
		{ "å","&aring;" },
		{ "≈","&asymp;" },
		{ "ã","&atilde;" },
		{ "ä","&auml;" },
		{ "„","&bdquo;" },
		{ "β","&beta;" },
		{ "¦","&brvbar;" },
		{ "•","&bull;" },
		{ "∩","&cap;" },
		{ "ç","&ccedil;" },
		{ "¸","&cedil;" },
		{ "¢","&cent;" },
		{ "χ","&chi;" },
		{ "ˆ","&circ;" },
		{ "♣","&clubs;" },
		{ "≅","&cong;" },
		{ "©","&copy;" },
		{ "↵","&crarr;" },
		{ "∪","&cup;" },
		{ "¤","&curren;" },
		{ "⇓","&dArr;" },
		{ "†","&dagger;" },
		{ "↓","&darr;" },
		{ "°","&deg;" },
		{ "δ","&delta;" },
		{ "♦","&diams;" },
		{ "÷","&divide;" },
		{ "é","&eacute;" },
		{ "ê","&ecirc;" },
		{ "è","&egrave;" },
		{ "∅","&empty;" },
		{ " ","&emsp;" },
		{ " ","&ensp;" },
		{ "ε","&epsilon;" },
		{ "≡","&equiv;" },
		{ "η","&eta;" },
		{ "ð","&eth;" },
		{ "ë","&euml;" },
		{ "€","&euro;" },
		{ "∃","&exist;" },
		{ "ƒ","&fnof;" },
		{ "∀","&forall;" },
		{ "½","&frac12;" },
		{ "¼","&frac14;" },
		{ "¾","&frac34;" },
		{ "⁄","&frasl;" },
		{ "γ","&gamma;" },
		{ "≥","&ge;" },
		{ ">","&gt;" },
		{ "⇔","&hArr;" },
		{ "↔","&harr;" },
		{ "♥","&hearts;" },
		{ "…","&hellip;" },
		{ "í","&iacute;" },
		{ "î","&icirc;" },
		{ "¡","&iexcl;" },
		{ "ì","&igrave;" },
		{ "ℑ","&image;" },
		{ "∞","&infin;" },
		{ "∫","&int;" },
		{ "ι","&iota;" },
		{ "¿","&iquest;" },
		{ "∈","&isin;" },
		{ "ï","&iuml;" },
		{ "κ","&kappa;" },
		{ "⇐","&lArr;" },
		{ "λ","&lambda;" },
		{ "〈","&lang;" },
		{ "«","&laquo;" },
		{ "←","&larr;" },
		{ "⌈","&lceil;" },
		{ "“","&ldquo;" },
		{ "≤","&le;" },
		{ "⌊","&lfloor;" },
		{ "∗","&lowast;" },
		{ "◊","&loz;" },
		{ "\xE2\x80\x8E","&lrm;" },
		{ "‹","&lsaquo;" },
		{ "‘","&lsquo;" },
		{ "<","&lt;" },
		{ "¯","&macr;" },
		{ "—","&mdash;" },
		{ "µ","&micro;" },
		{ "·","&middot;" },
		{ "−","&minus;" },
		{ "μ","&mu;" },
		{ "∇","&nabla;" },
		{ "\xC2\xA0","&nbsp;" },
		{ "–","&ndash;" },
		{ "≠","&ne;" },
		{ "∋","&ni;" },
		{ "¬","&not;" },
		{ "∉","&notin;" },
		{ "⊄","&nsub;" },
		{ "ñ","&ntilde;" },
		{ "ν","&nu;" },
		{ "ó","&oacute;" },
		{ "ô","&ocirc;" },
		{ "œ","&oelig;" },
		{ "ò","&ograve;" },
		{ "‾","&oline;" },
		{ "ω","&omega;" },
		{ "ο","&omicron;" },
		{ "⊕","&oplus;" },
		{ "∨","&or;" },
		{ "ª","&ordf;" },
		{ "º","&ordm;" },
		{ "ø","&oslash;" },
		{ "õ","&otilde;" },
		{ "⊗","&otimes;" },
		{ "ö","&ouml;" },
		{ "¶","&para;" },
		{ "∂","&part;" },
		{ "‰","&permil;" },
		{ "⊥","&perp;" },
		{ "φ","&phi;" },
		{ "π","&pi;" },
		{ "ϖ","&piv;" },
		{ "±","&plusmn;" },
		{ "£","&pound;" },
		{ "′","&prime;" },
		{ "∏","&prod;" },
		{ "∝","&prop;" },
		{ "ψ","&psi;" },
		{ "\"","&quot;" },
		{ "⇒","&rArr;" },
		{ "√","&radic;" },
		{ "〉","&rang;" },
		{ "»","&raquo;" },
		{ "→","&rarr;" },
		{ "⌉","&rceil;" },
		{ "”","&rdquo;" },
		{ "ℜ","&real;" },
		{ "®","&reg;" },
		{ "⌋","&rfloor;" },
		{ "ρ","&rho;" },
		{ "\xE2\x80\x8F","&rlm;" },
		{ "›","&rsaquo;" },
		{ "’","&rsquo;" },
		{ "‚","&sbquo;" },
		{ "š","&scaron;" },
		{ "⋅","&sdot;" },
		{ "§","&sect;" },
		{ "\xC2\xAD","&shy;" },
		{ "σ","&sigma;" },
		{ "ς","&sigmaf;" },
		{ "∼","&sim;" },
		{ "♠","&spades;" },
		{ "⊂","&sub;" },
		{ "⊆","&sube;" },
		{ "∑","&sum;" },
		{ "⊃","&sup;" },
		{ "¹","&sup1;" },
		{ "²","&sup2;" },
		{ "³","&sup3;" },
		{ "⊇","&supe;" },
		{ "ß","&szlig;" },
		{ "τ","&tau;" },
		{ "∴","&there4;" },
		{ "θ","&theta;" },
		{ "ϑ","&thetasym;" },
		{ " ","&thinsp;" },
		{ "þ","&thorn;" },
		{ "˜","&tilde;" },
		{ "×","&times;" },
		{ "™","&trade;" },
		{ "⇑","&uArr;" },
		{ "ú","&uacute;" },
		{ "↑","&uarr;" },
		{ "û","&ucirc;" },
		{ "ù","&ugrave;" },
		{ "¨","&uml;" },
		{ "ϒ","&upsih;" },
		{ "υ","&upsilon;" },
		{ "ü","&uuml;" },
		{ "℘","&weierp;" },
		{ "ξ","&xi;" },
		{ "ý","&yacute;" },
		{ "¥","&yen;" },
		{ "ÿ","&yuml;" },
		{ "ζ","&zeta;" },
		{ "\xE2\x80\x8D","&zwj;" },
		{ "\xE2\x80\x8C","&zwnj;" },
		//forhtml5
		{ ":","&colon;" },
		{ "(","&lpar;" },
		{ ")","&rpar;" },
		{ "\n","&NewLine;" },
		{ "\t","&Tab;" }
	};
	static std::map<std::string, std::string> _never_allowed_str = {
		{ "document.cookie","[removed]" },
		{ "document.write","[removed]" },
		{ ".parentNode","[removed]" },
		{ ".innerHTML","[removed]" },
		{ "-moz-binding","[removed]" },
		{ "<!--","&lt;!--" },
		{ "-->","--&gt;" },
		{ "<![CDATA[","&lt;![CDATA[" },
		{ "<comment>","&lt;comment&gt;" },
		{ "<%","&lt;&#37;" },
	};

	static std::vector<std::string> _never_allowed_regex = {
		"javascript\\s*:" ,
		"(document|(document\\.)?window)\\.(location|on\\w*)" ,
		"expression\\s*(\\(|&#40;)",
		"vbscript\\s*:",
		"wscript\\s*:" ,
		"jscript\\s*:" ,
		"vbs\\s*:" ,
		"Redirect\\s+30\\d" ,
		"([\"\\'])?data\\s*:[^\\\\1]*?base64[^\\\\1]*?,[^\\\\1]*?\\\\1?",
	};

	static std::vector<std::string> words = {
		"(j\\s*a\\s*v\\s*a\\s*s\\s*c\\s*r\\s*i\\s*p\\s*t)(\\W)" ,
		"(e\\s*x\\s*p\\s*r\\s*e\\s*s\\s*s\\s*i\\s*o\\s*n)(\\W)" ,
		"(v\\s*b\\s*s\\s*c\\s*r\\s*i\\s*p\\s*t)(\\W)",
		"(j\\s*s\\s*c\\s*r\\s*i\\s*p\\s*t)(\\W)",
		"(w\\s*s\\s*c\\s*r\\s*i\\s*p\\s*t)(\\W)" ,
		"(v\\s*b\\s*s)(\\W)" ,
		"(s\\s*c\\s*r\\s*i\\s*p\\s*t)(\\W)" ,
		"(b\\s*a\\s*s\\s*e\\s*6\\s*4)(\\W)" ,
		"(a\\s*p\\s*p\\s*l\\s*e\\s*t)(\\W)",
		"(a\\s*l\\s*e\\s*r\\s*t)(\\W)",
		"(d\\s*o\\s*c\\s*u\\s*m\\s*e\\s*n\\s*t)(\\W)",
		"(w\\s*r\\s*i\\s*t\\s*e)(\\W)",
		"(c\\s*o\\s*o\\s*k\\s*i\\s*e)(\\W)",
		"(w\\s*i\\s*n\\s*d\\s*o\\s*w)(\\W)",
		"(c\\s*o\\s*n\\s*f\\s*i\\s*r\\s*m)(\\W)",
		"(p\\s*r\\s*o\\s*m\\s*p\\s*t)(\\W)",
		"(e\\s*v\\s*a\\s*l)(\\W)",
	};


	static std::vector<std::string> naughty_tags = {
		"javascript", "expression", "vbscript", "jscript", "wscript",
		"vbs", "script", "base64", "applet", "alert", "document",
		"write", "cookie", "window", "confirm", "prompt", "eval"
	};

	static std::vector<std::string> evil_attributes = {
		"on\\w+", "style", "xmlns", "formaction", "form", "xlink:href", "FSCommand", "seekSegmentTime"
	};

	int cpp_htoi(char *s);
	size_t _raw_url_decode(char *str, size_t len);
	std::string _urldecodespaces(const boost::smatch& match);
	std::string raw_url_decode(std::string &str);
	void remove_invisible_characters(std::string &str, bool url_encode);
	std::string remove_xss(std::string str);
	char *rand_str(char *str);
	std::string entity_decode(std::string str);
	std::string _decode_entity(const boost::smatch& match);
	void _do_never_allowed(std::string &str);
	void make_php_tag_safe(std::string &str);
	std::string _compact_exploded_words(const boost::smatch& match);
	std::string _filter_attributes(std::string &str);
	std::string _js_link_removal(const boost::smatch& match);
	std::string _sanitize_naughty_html(const boost::smatch& match);


	typedef std::string(*FUNCPTR)(const boost::smatch& attribute);
	//attribute filter
	std::string _filter_style(const boost::smatch& attribute);

	static std::map<std::string, FUNCPTR> _evil_attribute_filter_func = {
		{ "style",&antiFilter::_filter_style },
	};
}
#endif // !_SECURE_
